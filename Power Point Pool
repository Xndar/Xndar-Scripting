//::///////////////////////////////////////////////
//:: Power Point Pool
//:: psi_pp_pool
//:://////////////////////////////////////////////
/*
    A psionâ€™s ability to manifest powers is limited by the power points he has available. 
	This script determines how many power points a psion starts the day with (after resting)
	while taking into account bonuses granted via feats and Intelligence score.
	
	Future additions will likely include items which grant bonuses to power point pool, as 
	well as possible small racial bonuses for Githyanki, Githzerai, Duergar, and Illithid.
	
	This script is for the 'psion' class only. If Psychic Warrior is implemented, it will 
	have its own script.
*/
//:://////////////////////////////////////////////
//:: Created By: Xndar
//:: Created On: February 20, 2015
//:://////////////////////////////////////////////
#include "x2_inc_spellhook"

void main()
{
	
    if (!X2PreSpellCastCode())
    {
	// If code within the PreSpellCastHook (i.e. UMD) reports FALSE, do not run this spell
        return;
    }

    object oTarget = GetSpellTargetObject();
	
	
	if (GetLocalInt(OBJECT_SELF, "PSI_PP") == 0 || GetLocalInt(OBJECT_SELF, "PSI_PP") != 0 && GetLastPCRested() == OBJECT_SELF)
	//This keeps the power point total from replenishing automatically on leveling. Done to prevent leveling during battle
	//as an exploit to regain lost power points.
	    if (!GetHasSpellEffect(GetSpellId(), oTarget) && !GetIsInCombat(OBJECT_SELF))
		{
			int nPP = GetLocalInt(OBJECT_SELF, "PSI_PP");
			//Defines the local variable that will represent power points.
			int nPsion = GetLevelByClass(90, OBJECT_SELF);
			//Determines level in psion class.
			int nPPvalue;
			int nIntBonus = GetAbilityModifier(ABILITY_INTELLIGENCE, OBJECT_SELF);
			int nPPBonus = nIntBonus * (nPsion/2);
			//Calculates bonus power points based on Intelligence score. This is per
			//3.5 sourcebooks.
			if (GetHasFeat(2862, OBJECT_SELF))
			{
				nPPBonus = nPPBonus + 4;
				//Psionic Heritage gateway feat grants a bonus of 4 power points.
			}
			
			
			switch (nPsion)
			{
				case 1: 
				{
					nPPvalue = 2 + nPPBonus;
					break;
				}
				case 2:
				{
					nPPvalue = 6 + nPPBonus;
					
					break;
				}
				case 3:
				{
					nPPvalue = 11 + nPPBonus;
					break;
				}
				case 4:
				{
					nPPvalue = 17 + nPPBonus;			
					break;
				}
				case 5:
				{
					nPPvalue = 25 + nPPBonus;
					break;
				}
				case 6:
				{
					nPPvalue = 35 + nPPBonus;
					break;
				}
				case 7:
				{
					nPPvalue = 46 + nPPBonus;
					break;
				}
				case 8:
				{
					nPPvalue = 58 + nPPBonus;
					break;
				}
				case 9:
				{
					nPPvalue = 72 + nPPBonus;
					break;
				}
				case 10:
				{
					nPPvalue = 88 + nPPBonus;
					break;
				}
				case 11:
				{
					nPPvalue = 106 + nPPBonus;
					break;
				}
				case 12:
				{
					nPPvalue = 126 + nPPBonus;
					break;
				}
				case 13:
				{
					nPPvalue = 147 + nPPBonus;
					break;
				}
				case 14:
				{
					nPPvalue = 170 + nPPBonus;
					break;
				}
				case 15:
				{
					nPPvalue = 195 + nPPBonus;
					break;
				}
				case 16:
				{
					nPPvalue = 221 + nPPBonus;
					break;
				}
				case 17:
				{
					nPPvalue = 250 + nPPBonus;
					break;
				}
				case 18:
				{
					nPPvalue = 280 + nPPBonus;
					break;
				}
				case 19:
				{
					nPPvalue = 311 + nPPBonus;
					break;
				}
				case 20:
				{
					nPPvalue = 343 + nPPBonus;
					break;
				}
				case 21:
				{
					nPPvalue = 343 + nPPBonus;
					break;
				}
				case 22:
				{
					nPPvalue = 343 + nPPBonus;
					break;
				}
				case 23:
				{
					nPPvalue = 343 + nPPBonus;
					break;
				}
				case 24:
				{
					nPPvalue = 343 + nPPBonus;
					break;
				}
				case 25:
				{
					nPPvalue = 343 + nPPBonus;
					break;
				}
				case 26:
				{
					nPPvalue = 343 + nPPBonus;
					break;
				}
				case 27:
				{
					nPPvalue = 343 + nPPBonus;
					break;
				}
				case 28:
				{
					nPPvalue = 343 + nPPBonus;
					break;
				}
				case 29:
				{
					nPPvalue = 343 + nPPBonus;
					break;
				}
				case 30:
				{
					nPPvalue = 343 + nPPBonus;
					break;
				}
				//Power point totals based on psion level. Power point total plateaus at level 20.
			}
			
			if (GetHasFeat(21417, OBJECT_SELF))
			{
				int nPPExpand = nPPvalue/10;
				if(GetHasFeat(21418, OBJECT_SELF))
				{
					nPPExpand = nPPExpand * 2;
				}
				nPPvalue = nPPvalue + nPPExpand;
				//Checks for 'Expanded Power Point Pool I and II' feats. EPPP I grants a 10% bonus to
				//power point pool, while EPPP II increases this bonus to 20%.
			}
		
			
			SetLocalInt(OBJECT_SELF, "PSI_PP", nPPvalue);
			SetLocalInt(OBJECT_SELF, "PSI_PP_MAX", nPPvalue);
			SendMessageToPC(OBJECT_SELF, "Power Point Pool:  " + IntToString(nPPvalue));
			
			//The following populates the player's screen with a GUI (full credit for development to MimiFearthegn)
			//to keep track of running power point total:
			
			//Put the below command wherever you need the screen to pop up:
			DisplayGuiScreen(OBJECT_SELF, "powerpointscreen", FALSE, "powerpointscreen.xml");
			
			//Use the below command to update your powerpoints
			nPP = GetLocalInt(OBJECT_SELF, "PSI_PP");
			SetGUIObjectText(OBJECT_SELF, "powerpointscreen", "PPRatioTXT", -1, IntToString(nPPvalue));
			
			
		}
		
		
		
}
